openapi: 3.0.3
info:
  title: GlobeCo Order Service API
  version: 2.0.0
  description: |
    OpenAPI specification for the GlobeCo Order Service.
    Provides comprehensive endpoints to manage orders, statuses, order types, and blotters.
    
    **Key Features:**
    - **Batch Order Processing**: Create up to 1000 orders in a single request with detailed success/failure reporting
    - **Non-atomic Processing**: Individual order failures don't affect other orders in the batch
    - **Comprehensive Error Handling**: Detailed validation and error messages for each order
    - **RESTful HTTP Status Codes**: Proper use of 200, 207, 400, 413, and 500 status codes
    
    **Breaking Changes in v2.0.0:**
    - `/orders` POST endpoint now accepts arrays of orders instead of single orders
    - Response format changed from `OrderWithDetailsDTO` to `OrderListResponseDTO`
servers:
  - url: /api/v1
paths:
  /statuses:
    get:
      summary: List all statuses
      operationId: listStatuses
      tags: [Status]
      responses:
        '200':
          description: List of all statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusDTO'
    post:
      summary: Create a new status
      operationId: createStatus
      tags: [Status]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusPostDTO'
      responses:
        '200':
          description: The created status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
  /status/{id}:
    get:
      summary: Get a status by ID
      operationId: getStatusById
      tags: [Status]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusDTO'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update an existing status
      operationId: updateStatus
      tags: [Status]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusDTO'
      responses:
        '200':
          description: The updated status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a status by ID
      operationId: deleteStatus
      tags: [Status]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: version
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Status deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /orderTypes:
    get:
      summary: List all order types
      operationId: listOrderTypes
      tags: [OrderType]
      responses:
        '200':
          description: List of all order types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderTypeDTO'
    post:
      summary: Create a new order type
      operationId: createOrderType
      tags: [OrderType]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderTypePostDTO'
      responses:
        '200':
          description: The created order type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderTypeDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
  /orderType/{id}:
    get:
      summary: Get an order type by ID
      operationId: getOrderTypeById
      tags: [OrderType]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The order type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderTypeDTO'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update an existing order type
      operationId: updateOrderType
      tags: [OrderType]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderTypeDTO'
      responses:
        '200':
          description: The updated order type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderTypeDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete an order type by ID
      operationId: deleteOrderType
      tags: [OrderType]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: version
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Order type deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /blotters:
    get:
      summary: List all blotters
      operationId: listBlotters
      tags: [Blotter]
      responses:
        '200':
          description: List of all blotters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlotterDTO'
    post:
      summary: Create a new blotter
      operationId: createBlotter
      tags: [Blotter]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlotterPostDTO'
      responses:
        '200':
          description: The created blotter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlotterDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
  /blotter/{id}:
    get:
      summary: Get a blotter by ID
      operationId: getBlotterById
      tags: [Blotter]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The blotter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlotterDTO'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update an existing blotter
      operationId: updateBlotter
      tags: [Blotter]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlotterDTO'
      responses:
        '200':
          description: The updated blotter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlotterDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a blotter by ID
      operationId: deleteBlotter
      tags: [Blotter]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: version
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Blotter deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /orders:
    get:
      summary: List all orders with pagination, sorting, and filtering
      operationId: listOrders
      tags: [Order]
      description: |
        Retrieve orders with advanced pagination, sorting, and filtering capabilities.
        
        **Pagination:**
        - `limit`: Number of orders to return (1-1000, default: 50)
        - `offset`: Number of orders to skip (default: 0)
        
        **Sorting:**
        - `sort`: Comma-separated list of fields to sort by
        - Prefix with `-` for descending order (e.g., `-orderTimestamp`)
        - Valid fields: `id`, `security.ticker`, `portfolio.name`, `blotter.name`, `status.abbreviation`, `orderType.abbreviation`, `quantity`, `orderTimestamp`
        - Default: `id` (ascending)
        
        **Filtering:**
        - Multiple values per field use OR logic (comma-separated)
        - Multiple different fields use AND logic
        - Valid filter fields: `security.ticker`, `portfolio.name`, `blotter.name`, `status.abbreviation`, `orderType.abbreviation`, `orderTimestamp`
      parameters:
        - name: limit
          in: query
          description: Maximum number of orders to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
          example: 50
        - name: offset
          in: query
          description: Number of orders to skip for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
        - name: sort
          in: query
          description: |
            Comma-separated list of fields to sort by. 
            Prefix with `-` for descending order.
            Valid fields: id, security.ticker, portfolio.name, blotter.name, status.abbreviation, orderType.abbreviation, quantity, orderTimestamp
          required: false
          schema:
            type: string
          examples:
            single_field:
              summary: Sort by single field
              value: "security.ticker"
            multiple_fields:
              summary: Sort by multiple fields
              value: "-orderTimestamp,security.ticker"
            mixed_directions:
              summary: Mixed sort directions
              value: "portfolio.name,-quantity"
        - name: security.ticker
          in: query
          description: Filter by security ticker (supports multiple comma-separated values)
          required: false
          schema:
            type: string
          examples:
            single_value:
              summary: Single ticker
              value: "IBM"
            multiple_values:
              summary: Multiple tickers
              value: "IBM,AAPL,MSFT"
        - name: portfolio.name
          in: query
          description: Filter by portfolio name (supports multiple comma-separated values)
          required: false
          schema:
            type: string
          examples:
            single_value:
              summary: Single portfolio
              value: "Growth Fund"
            multiple_values:
              summary: Multiple portfolios
              value: "Growth Fund,Value Fund"
        - name: blotter.name
          in: query
          description: Filter by blotter name (supports multiple comma-separated values)
          required: false
          schema:
            type: string
          examples:
            single_value:
              summary: Single blotter
              value: "Default"
            multiple_values:
              summary: Multiple blotters
              value: "Default,Trading Desk A"
        - name: status.abbreviation
          in: query
          description: Filter by status abbreviation (supports multiple comma-separated values)
          required: false
          schema:
            type: string
          examples:
            single_value:
              summary: Single status
              value: "NEW"
            multiple_values:
              summary: Multiple statuses
              value: "NEW,SENT,FILLED"
        - name: orderType.abbreviation
          in: query
          description: Filter by order type abbreviation (supports multiple comma-separated values)
          required: false
          schema:
            type: string
          examples:
            single_value:
              summary: Single order type
              value: "BUY"
            multiple_values:
              summary: Multiple order types
              value: "BUY,SELL"
        - name: orderTimestamp
          in: query
          description: Filter by order timestamp (supports multiple comma-separated values)
          required: false
          schema:
            type: string
            format: date-time
          examples:
            single_value:
              summary: Single timestamp
              value: "2024-06-01T12:00:00Z"
            multiple_values:
              summary: Multiple timestamps
              value: "2024-06-01T12:00:00Z,2024-06-01T13:00:00Z"
      responses:
        '200':
          description: Paginated list of orders with metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPageResponseDTO'
              examples:
                basic_response:
                  summary: Basic paginated response
                  value:
                    content:
                      - id: 101
                        blotter:
                          id: 1
                          name: "Default"
                          version: 1
                        status:
                          id: 1
                          abbreviation: "NEW"
                          description: "New"
                          version: 1
                        security:
                          securityId: "SEC123456789012345678901"
                          ticker: "IBM"
                        portfolio:
                          portfolioId: "PORT123456789012345678"
                          name: "Growth Fund"
                        orderType:
                          id: 2
                          abbreviation: "BUY"
                          description: "Buy"
                          version: 1
                        quantity: 100.00000000
                        limitPrice: 50.25000000
                        orderTimestamp: "2024-06-01T12:00:00Z"
                        version: 1
                    pagination:
                      pageSize: 50
                      offset: 0
                      totalElements: 1
                      hasNext: false
                      hasPrevious: false
                filtered_response:
                  summary: Filtered and sorted response
                  value:
                    content:
                      - id: 102
                        blotter:
                          id: 1
                          name: "Default"
                          version: 1
                        status:
                          id: 1
                          abbreviation: "NEW"
                          description: "New"
                          version: 1
                        security:
                          securityId: "SEC987654321098765432109"
                          ticker: "AAPL"
                        portfolio:
                          portfolioId: "PORT987654321098765432"
                          name: "Tech Fund"
                        orderType:
                          id: 2
                          abbreviation: "BUY"
                          description: "Buy"
                          version: 1
                        quantity: 200.00000000
                        limitPrice: 150.75000000
                        orderTimestamp: "2024-06-01T14:00:00Z"
                        version: 1
                    pagination:
                      pageSize: 50
                      offset: 0
                      totalElements: 1
                      hasNext: false
                      hasPrevious: false
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
              examples:
                invalid_sort_field:
                  summary: Invalid sort field
                  value:
                    message: "Invalid sort fields: [invalidField]. Valid fields are: [id, security.ticker, portfolio.name, blotter.name, status.abbreviation, orderType.abbreviation, quantity, orderTimestamp]"
                    validSortFields: ["id", "security.ticker", "portfolio.name", "blotter.name", "status.abbreviation", "orderType.abbreviation", "quantity", "orderTimestamp"]
                invalid_filter_field:
                  summary: Invalid filter field
                  value:
                    message: "Invalid filter fields: [invalidField]. Valid fields are: [security.ticker, portfolio.name, blotter.name, status.abbreviation, orderType.abbreviation, orderTimestamp]"
                    validFilterFields: ["security.ticker", "portfolio.name", "blotter.name", "status.abbreviation", "orderType.abbreviation", "orderTimestamp"]
                invalid_limit:
                  summary: Invalid limit parameter
                  value:
                    message: "Limit must be between 1 and 1000"
    post:
      summary: Create orders in batch
      operationId: createOrdersBatch
      tags: [Order]
      description: |
        Create multiple orders in a single batch request. Supports up to 1000 orders per batch.
        Returns comprehensive results including success/failure status for each order.
        
        **HTTP Status Codes:**
        - `200` - All orders processed successfully
        - `207` - Partial success (some orders succeeded, others failed) 
        - `400` - Request validation failed
        - `413` - Batch size exceeds maximum allowed (1000 orders)
        - `500` - Unexpected server error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OrderPostDTO'
              minItems: 1
              maxItems: 1000
              example:
                - blotterId: 1
                  statusId: 1
                  portfolioId: "PORT123456789012345678"
                  orderTypeId: 2
                  securityId: "SEC123456789012345678901"
                  quantity: 100.00000000
                  limitPrice: 50.25000000
                  orderTimestamp: "2024-06-01T12:00:00Z"
                  version: 1
                - blotterId: 1
                  statusId: 1
                  portfolioId: "PORT987654321098765432"
                  orderTypeId: 3
                  securityId: "SEC987654321098765432109"
                  quantity: 200.00000000
                  limitPrice: 75.50000000
                  orderTimestamp: "2024-06-01T12:01:00Z"
                  version: 1
      responses:
        '200':
          description: All orders processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponseDTO'
              example:
                status: "SUCCESS"
                message: "All orders processed successfully"
                totalReceived: 2
                successful: 2
                failed: 0
                orders:
                  - status: "SUCCESS"
                    message: "Order created successfully"
                    orderDetails:
                      id: 101
                      blotter:
                        id: 1
                        name: "Default"
                        version: 1
                      status:
                        id: 1
                        abbreviation: "NEW"
                        description: "New"
                        version: 1
                      portfolioId: "PORT123456789012345678"
                      orderType:
                        id: 2
                        abbreviation: "BUY"
                        description: "Buy"
                        version: 1
                      securityId: "SEC123456789012345678901"
                      quantity: 100.00000000
                      limitPrice: 50.25000000
                      orderTimestamp: "2024-06-01T12:00:00Z"
                      version: 1
                    orderId: 101
                    requestIndex: 0
                  - status: "SUCCESS"
                    message: "Order created successfully"
                    orderDetails:
                      id: 102
                      blotter:
                        id: 1
                        name: "Default"
                        version: 1
                      status:
                        id: 1
                        abbreviation: "NEW"
                        description: "New"
                        version: 1
                      portfolioId: "PORT987654321098765432"
                      orderType:
                        id: 3
                        abbreviation: "SELL"
                        description: "Sell"
                        version: 1
                      securityId: "SEC987654321098765432109"
                      quantity: 200.00000000
                      limitPrice: 75.50000000
                      orderTimestamp: "2024-06-01T12:01:00Z"
                      version: 1
                    orderId: 102
                    requestIndex: 1
        '207':
          description: Partial success or all orders failed during processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponseDTO'
              example:
                status: "PARTIAL"
                message: "Some orders processed successfully, others failed"
                totalReceived: 2
                successful: 1
                failed: 1
                orders:
                  - status: "SUCCESS"
                    message: "Order created successfully"
                    orderDetails:
                      id: 101
                      blotter:
                        id: 1
                        name: "Default"
                        version: 1
                      status:
                        id: 1
                        abbreviation: "NEW"
                        description: "New"
                        version: 1
                      portfolioId: "PORT123456789012345678"
                      orderType:
                        id: 2
                        abbreviation: "BUY"
                        description: "Buy"
                        version: 1
                      securityId: "SEC123456789012345678901"
                      quantity: 100.00000000
                      limitPrice: 50.25000000
                      orderTimestamp: "2024-06-01T12:00:00Z"
                      version: 1
                    orderId: 101
                    requestIndex: 0
                  - status: "FAILURE"
                    message: "Blotter with ID 999 not found"
                    orderDetails: null
                    orderId: null
                    requestIndex: 1
        '400':
          description: Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponseDTO'
              example:
                status: "FAILURE"
                message: "Request validation failed: Invalid request data"
                totalReceived: 0
                successful: 0
                failed: 0
                orders: []
        '413':
          description: Batch size exceeds maximum allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponseDTO'
              example:
                status: "FAILURE"
                message: "Batch size 1001 exceeds maximum allowed size of 1000"
                totalReceived: 0
                successful: 0
                failed: 0
                orders: []
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponseDTO'
              example:
                status: "FAILURE"
                message: "Internal server error processing batch request"
                totalReceived: 0
                successful: 0
                failed: 0
                orders: []
  /order/{id}:
    get:
      summary: Get an order by ID
      operationId: getOrderById
      tags: [Order]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The order (with details)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderWithDetailsDTO'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update an existing order
      operationId: updateOrder
      tags: [Order]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '200':
          description: The updated order (with details)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderWithDetailsDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete an order by ID
      operationId: deleteOrder
      tags: [Order]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: version
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Order deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  /actuator/health/liveness:
    get:
      summary: Liveness probe
      description: Returns 200 if the application is alive. Used for Kubernetes livenessProbe.
      tags: [Health]
      responses:
        '200':
          description: Application is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
  /actuator/health/readiness:
    get:
      summary: Readiness probe
      description: Returns 200 if the application is ready to serve traffic. Used for Kubernetes readinessProbe.
      tags: [Health]
      responses:
        '200':
          description: Application is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
  /actuator/health/startup:
    get:
      summary: Startup probe
      description: Returns 200 if the application has started successfully. Used for Kubernetes startupProbe.
      tags: [Health]
      responses:
        '200':
          description: Application has started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
  /api/v1/orders/{id}/submit:
    post:
      summary: Submit an order to the trade service
      description: >
        Submits the order with the given ID to the GlobeCo Trade Service (calls POST /api/v1/tradeOrders on the trade service).
        If successful, updates the order status from "NEW" to "SENT" and returns the updated OrderDTO.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '400':
          description: Order could not be submitted (not NEW or trade service error)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: not submitted
  /api/v1/orders/batch/submit:
    post:
      summary: Submit multiple orders in batch to the trade service
      operationId: submitOrdersBatch
      tags: [Order]
      description: |
        Submit multiple orders to the GlobeCo Trade Service in a single batch request.
        Processes orders individually (non-atomic batch) and continues processing even if some orders fail.
        
        **Processing Strategy:**
        - Each order must exist in the database and be in "NEW" status
        - Orders are processed individually - failure of one order doesn't affect others
        - Each order's submission to the trade service is independent
        
        **HTTP Status Codes:**
        - `200` - All orders submitted successfully
        - `207` - Partial success (some orders succeeded, others failed) or all orders failed during processing
        - `400` - Request validation failed (invalid JSON, missing orderIds, empty batch, null values)
        - `413` - Batch size exceeds maximum allowed (100 orders)
        - `500` - Unexpected server error
        
        **Batch Size Limits:**
        - Minimum: 1 order
        - Maximum: 100 orders per batch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchSubmitRequestDTO'
            examples:
              small_batch:
                summary: Small batch (3 orders)
                value:
                  orderIds: [1, 2, 3]
              large_batch:
                summary: Large batch (10 orders)
                value:
                  orderIds: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
              max_batch:
                summary: Maximum batch size (100 orders)
                value:
                  orderIds: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
      responses:
        '200':
          description: All orders submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSubmitResponseDTO'
              example:
                status: "SUCCESS"
                message: "All 3 orders submitted successfully"
                totalRequested: 3
                successful: 3
                failed: 0
                results:
                  - orderId: 1
                    status: "SUCCESS"
                    message: "Order submitted successfully"
                    tradeOrderId: 12345
                    requestIndex: 0
                  - orderId: 2
                    status: "SUCCESS"
                    message: "Order submitted successfully"
                    tradeOrderId: 12346
                    requestIndex: 1
                  - orderId: 3
                    status: "SUCCESS"
                    message: "Order submitted successfully"
                    tradeOrderId: 12347
                    requestIndex: 2
        '207':
          description: Partial success or all orders failed during processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSubmitResponseDTO'
              examples:
                partial_success:
                  summary: Partial success (some orders succeeded, others failed)
                  value:
                    status: "PARTIAL"
                    message: "2 of 3 orders submitted successfully, 1 failed"
                    totalRequested: 3
                    successful: 2
                    failed: 1
                    results:
                      - orderId: 1
                        status: "SUCCESS"
                        message: "Order submitted successfully"
                        tradeOrderId: 12345
                        requestIndex: 0
                      - orderId: 2
                        status: "FAILURE"
                        message: "Order not in NEW status"
                        requestIndex: 1
                      - orderId: 3
                        status: "SUCCESS"
                        message: "Order submitted successfully"
                        tradeOrderId: 12347
                        requestIndex: 2
                all_failed_processing:
                  summary: All orders failed during processing
                  value:
                    status: "FAILURE"
                    message: "All orders failed to submit"
                    totalRequested: 2
                    successful: 0
                    failed: 2
                    results:
                      - orderId: 999
                        status: "FAILURE"
                        message: "Order not found"
                        requestIndex: 0
                      - orderId: 998
                        status: "FAILURE"
                        message: "Order not in NEW status"
                        requestIndex: 1
        '400':
          description: Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSubmitResponseDTO'
              examples:
                null_request:
                  summary: Null request body
                  value:
                    status: "FAILURE"
                    message: "Request body is required and must contain orderIds array"
                    totalRequested: 0
                    successful: 0
                    failed: 0
                    results: []
                empty_batch:
                  summary: Empty order IDs list
                  value:
                    status: "FAILURE"
                    message: "Order IDs list cannot be empty"
                    totalRequested: 0
                    successful: 0
                    failed: 0
                    results: []
                null_order_ids:
                  summary: Null values in order IDs
                  value:
                    status: "FAILURE"
                    message: "Order IDs cannot contain null values"
                    totalRequested: 0
                    successful: 0
                    failed: 0
                    results: []
        '413':
          description: Batch size exceeds maximum allowed (100 orders)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSubmitResponseDTO'
              example:
                status: "FAILURE"
                message: "Batch size 101 exceeds maximum allowed size of 100"
                totalRequested: 0
                successful: 0
                failed: 0
                results: []
        '500':
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSubmitResponseDTO'
              example:
                status: "FAILURE"
                message: "Internal server error processing batch submission request: Database connection failed"
                totalRequested: 0
                successful: 0
                failed: 0
                results: []
components:
  schemas:
    StatusDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        abbreviation:
          type: string
          example: NEW
        description:
          type: string
          example: New
        version:
          type: integer
          example: 1
      required: [id, abbreviation, description, version]
    StatusPostDTO:
      type: object
      properties:
        abbreviation:
          type: string
          example: NEW
        description:
          type: string
          example: New
        version:
          type: integer
          example: 1
      required: [abbreviation, description, version]
    OrderTypeDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        abbreviation:
          type: string
          example: MKT
        description:
          type: string
          example: Market
        version:
          type: integer
          example: 1
      required: [id, abbreviation, description, version]
    OrderTypePostDTO:
      type: object
      properties:
        abbreviation:
          type: string
          example: MKT
        description:
          type: string
          example: Market
        version:
          type: integer
          example: 1
      required: [abbreviation, description, version]
    BlotterDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Default
        version:
          type: integer
          example: 1
      required: [id, name, version]
    BlotterPostDTO:
      type: object
      properties:
        name:
          type: string
          example: Default
        version:
          type: integer
          example: 1
      required: [name, version]
    OrderDTO:
      type: object
      properties:
        id:
          type: integer
          example: 42
        blotterId:
          type: integer
          nullable: true
          example: 1
        statusId:
          type: integer
          example: 2
        portfolioId:
          type: string
          example: 5f47ac10b8e4e53b8cfa9b1a
        orderTypeId:
          type: integer
          example: 3
        securityId:
          type: string
          example: 5f47ac10b8e4e53b8cfa9b1b
        quantity:
          type: number
          format: double
          example: 100.00000000
        limitPrice:
          type: number
          format: double
          nullable: true
          example: 50.25000000
        tradeOrderId:
          type: integer
          nullable: true
          example: 99999
        orderTimestamp:
          type: string
          format: date-time
          example: 2024-06-01T12:00:00Z
        version:
          type: integer
          example: 1
      required: [id, blotterId, statusId, portfolioId, orderTypeId, securityId, quantity, orderTimestamp, version]
    OrderPostDTO:
      type: object
      properties:
        blotterId:
          type: integer
          nullable: true
          example: 1
        statusId:
          type: integer
          example: 2
        portfolioId:
          type: string
          example: 5f47ac10b8e4e53b8cfa9b1a
        orderTypeId:
          type: integer
          example: 3
        securityId:
          type: string
          example: 5f47ac10b8e4e53b8cfa9b1b
        quantity:
          type: number
          format: double
          example: 100.00000000
        limitPrice:
          type: number
          format: double
          nullable: true
          example: 50.25000000
        tradeOrderId:
          type: integer
          nullable: true
          example: 99999
        orderTimestamp:
          type: string
          format: date-time
          example: 2024-06-01T12:00:00Z
        version:
          type: integer
          example: 1
      required: [blotterId, statusId, portfolioId, orderTypeId, securityId, quantity, orderTimestamp, version]
    OrderWithDetailsDTO:
      type: object
      properties:
        id:
          type: integer
          example: 42
        blotter:
          $ref: '#/components/schemas/BlotterDTO'
        status:
          $ref: '#/components/schemas/StatusDTO'
        security:
          $ref: '#/components/schemas/SecurityDTO'
        portfolio:
          $ref: '#/components/schemas/PortfolioDTO'
        orderType:
          $ref: '#/components/schemas/OrderTypeDTO'
        quantity:
          type: number
          format: double
          example: 100.00000000
        limitPrice:
          type: number
          format: double
          nullable: true
          example: 50.25000000
        tradeOrderId:
          type: integer
          nullable: true
          example: 99999
        orderTimestamp:
          type: string
          format: date-time
          example: 2024-06-01T12:00:00Z
        version:
          type: integer
          example: 1
      required: [id, blotter, status, security, portfolio, orderType, quantity, orderTimestamp, version]
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          example: UP
      required: [status]
    OrderPostResponseDTO:
      type: object
      description: Response DTO for individual order processing results in batch operations
      properties:
        status:
          type: string
          enum: [SUCCESS, FAILURE]
          description: Status of the individual order processing
          example: "SUCCESS"
        message:
          type: string
          description: Human-readable message describing the result
          example: "Order created successfully"
        orderDetails:
          allOf:
            - $ref: '#/components/schemas/OrderWithDetailsDTO'
          nullable: true
          description: Complete order details if processing was successful, null if failed
        orderId:
          type: integer
          nullable: true
          description: The ID of the created order if successful, null if failed
          example: 101
        requestIndex:
          type: integer
          description: Zero-based index of this order in the original request array
          example: 0
      required: [status, message, requestIndex]
    OrderListResponseDTO:
      type: object
      description: Response DTO for batch order processing operations
      properties:
        status:
          type: string
          enum: [SUCCESS, PARTIAL, FAILURE]
          description: |
            Overall status of the batch operation:
            - SUCCESS: All orders processed successfully
            - PARTIAL: Some orders succeeded, some failed
            - FAILURE: All orders failed or validation error
          example: "SUCCESS"
        message:
          type: string
          description: Human-readable message describing the overall result
          example: "All orders processed successfully"
        totalReceived:
          type: integer
          description: Total number of orders received in the request
          example: 2
        successful:
          type: integer
          description: Number of orders processed successfully
          example: 2
        failed:
          type: integer
          description: Number of orders that failed processing
          example: 0
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderPostResponseDTO'
          description: Array of individual order processing results
      required: [status, message, totalReceived, successful, failed, orders]
    SecurityDTO:
      type: object
      description: Security information with ID and ticker
      properties:
        securityId:
          type: string
          description: Unique security identifier
          example: "SEC123456789012345678901"
        ticker:
          type: string
          description: Security ticker symbol
          example: "IBM"
      required: [securityId, ticker]
    PortfolioDTO:
      type: object
      description: Portfolio information with ID and name
      properties:
        portfolioId:
          type: string
          description: Unique portfolio identifier
          example: "PORT123456789012345678"
        name:
          type: string
          description: Portfolio name
          example: "Growth Fund"
      required: [portfolioId, name]
    OrderPageResponseDTO:
      type: object
      description: Paginated response containing orders and pagination metadata
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrderWithDetailsDTO'
          description: Array of orders for the current page
        pagination:
          $ref: '#/components/schemas/PaginationMetadataDTO'
      required: [content, pagination]
    PaginationMetadataDTO:
      type: object
      description: Pagination metadata for paginated responses
      properties:
        pageSize:
          type: integer
          description: Number of items requested per page
          example: 50
        offset:
          type: integer
          description: Number of items skipped
          example: 0
        totalElements:
          type: integer
          description: Total number of items available
          example: 150
        hasNext:
          type: boolean
          description: Whether there are more pages available
          example: true
        hasPrevious:
          type: boolean
          description: Whether there are previous pages available
          example: false
      required: [pageSize, offset, totalElements, hasNext, hasPrevious]
    ErrorResponseDTO:
      type: object
      description: Error response with validation details
      properties:
        message:
          type: string
          description: Error message
          example: "Invalid sort fields: [invalidField]. Valid fields are: [id, security.ticker, portfolio.name, blotter.name, status.abbreviation, orderType.abbreviation, quantity, orderTimestamp]"
        validSortFields:
          type: array
          items:
            type: string
          description: List of valid sort fields (present for sort validation errors)
          example: ["id", "security.ticker", "portfolio.name", "blotter.name", "status.abbreviation", "orderType.abbreviation", "quantity", "orderTimestamp"]
        validFilterFields:
          type: array
          items:
            type: string
          description: List of valid filter fields (present for filter validation errors)
          example: ["security.ticker", "portfolio.name", "blotter.name", "status.abbreviation", "orderType.abbreviation", "orderTimestamp"]
      required: [message]
    BatchSubmitRequestDTO:
      type: object
      description: Request DTO for batch order submission containing order IDs to submit
      properties:
        orderIds:
          type: array
          items:
            type: integer
          description: |
            Array of order IDs to submit to the trade service.
            Each order must exist in the database and be in "NEW" status.
          minItems: 1
          maxItems: 100
          example: [1, 2, 3]
      required: [orderIds]
    BatchSubmitResponseDTO:
      type: object
      description: Response DTO for batch order submission operations
      properties:
        status:
          type: string
          enum: [SUCCESS, PARTIAL, FAILURE]
          description: |
            Overall status of the batch submission:
            - SUCCESS: All orders submitted successfully
            - PARTIAL: Some orders succeeded, some failed
            - FAILURE: All orders failed or validation error
          example: "SUCCESS"
        message:
          type: string
          description: Human-readable message describing the overall result
          example: "All 3 orders submitted successfully"
        totalRequested:
          type: integer
          description: Total number of orders requested for submission
          example: 3
        successful:
          type: integer
          description: Number of orders successfully submitted
          example: 3
        failed:
          type: integer
          description: Number of orders that failed to submit
          example: 0
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderSubmitResultDTO'
          description: Array of individual order submission results
      required: [status, message, totalRequested, successful, failed, results]
    OrderSubmitResultDTO:
      type: object
      description: Individual order submission result within a batch submission
      properties:
        orderId:
          type: integer
          description: The ID of the order that was processed
          example: 1
        status:
          type: string
          enum: [SUCCESS, FAILURE]
          description: Status of the individual order submission
          example: "SUCCESS"
        message:
          type: string
          description: |
            Descriptive message about the submission result.
            For success: confirmation message
            For failure: error details explaining why submission failed
          example: "Order submitted successfully"
        tradeOrderId:
          type: integer
          nullable: true
          description: |
            The trade order ID returned from the trade service.
            Only present when status is "SUCCESS", null for failures.
          example: 12345
        requestIndex:
          type: integer
          description: The zero-based index of this order in the original request array
          example: 0
      required: [orderId, status, message, requestIndex]
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Not found
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad request
    Conflict:
      description: Conflict (e.g., version mismatch)
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Version mismatch or resource in use 