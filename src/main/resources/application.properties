spring.application.name=globeco-order-service
server.port=8081

spring.application.name=globeco-order-service
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.flyway.enabled=true

# Actuator health endpoints for Kubernetes probes
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.probes.enabled=true
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# External Service Configuration
external.services.security.url=http://globeco-security-service:8000
external.services.security.timeout=5000
external.services.portfolio.url=http://globeco-portfolio-service:8000
external.services.portfolio.timeout=5000

# Caffeine Cache Configuration
cache.security.ttl=300000
cache.security.max-size=10000
cache.portfolio.ttl=300000
cache.portfolio.max-size=10000

# Cache Statistics and Monitoring
cache.statistics.enabled=true
management.metrics.cache.instrument-cache=true

# Logging Configuration - Can be overridden by LOG_LEVEL environment variable
logging.level.root=${LOG_LEVEL:INFO}
logging.level.org.kasbench.globeco_order_service=${LOG_LEVEL:DEBUG}
logging.level.org.kasbench.globeco_order_service.service=DEBUG
logging.level.org.kasbench.globeco_order_service.controller=DEBUG

# OpenTelemetry OTLP Metrics Export
management.otlp.metrics.export.url=http://otel-collector-collector.monitoring.svc.cluster.local:4318/v1/metrics
management.otlp.metrics.export.step=1m
management.otlp.metrics.export.resource-attributes.service.name=globeco-order-service
management.otlp.metrics.export.resource-attributes.service.version=1.0.0
management.otlp.metrics.export.resource-attributes.service.namespace=globeco
management.otlp.metrics.export.resource-attributes.service.instance.version=1.0.0
management.otlp.metrics.export.resource-attributes.service.instance.namespace=globeco

# OpenTelemetry OTLP Tracing Export
management.otlp.tracing.endpoint=http://otel-collector-collector.monitoring.svc.cluster.local:4318/v1/traces
management.otlp.tracing.resource-attributes.service.name=globeco-order-service
management.otlp.tracing.resource-attributes.service.version=1.0.0
management.otlp.tracing.resource-attributes.service.namespace=globeco
management.otlp.tracing.resource-attributes.service.instance.namespace=globeco
management.otlp.tracing.sampling.probability=1.0

# OTLP Exporter Logging (for debugging)
logging.level.io.micrometer.registry.otlp=DEBUG
logging.level.io.opentelemetry.exporter.otlp=DEBUG

# Custom Metrics Configuration - Always Enabled
metrics.custom.enabled=true

# Database Metrics Configuration - Always Enabled
metrics.custom.database.enabled=true
metrics.custom.database.collection-interval=30s
metrics.custom.database.acquisition-warning-threshold-ms=5000
metrics.custom.database.exhaustion-alert-threshold=5
metrics.custom.database.detailed-timing-enabled=true
metrics.custom.database.leak-detection-enabled=true
metrics.custom.database.min-utilization-for-detailed-metrics=0.1

# HTTP Metrics Configuration - Always Enabled
metrics.custom.http.enabled=true
metrics.custom.http.collection-interval=30s
metrics.custom.http.utilization-warning-threshold=0.8
metrics.custom.http.max-monitored-services=10
metrics.custom.http.per-route-metrics-enabled=false
metrics.custom.http.statistics-timeout-ms=1000
metrics.custom.http.connection-timing-enabled=true

# HTTP Request Metrics Configuration - Always Enabled
metrics.custom.http.request.enabled=true
metrics.custom.http.request.route-sanitization-enabled=true
metrics.custom.http.request.max-path-segments=10
metrics.custom.http.request.metric-caching-enabled=true
metrics.custom.http.request.max-cache-size=1000
metrics.custom.http.request.detailed-logging-enabled=false

# Metrics Collection Configuration
metrics.custom.collection.interval=30s
metrics.custom.collection.batch-enabled=true
metrics.custom.collection.batch-size=100
metrics.custom.collection.timeout-ms=5000
metrics.custom.collection.async-enabled=true
metrics.custom.collection.async-threads=2
metrics.custom.collection.threshold-based-collection=false

# Metrics Initialization Configuration
metrics.custom.initialization.timeout=30s
metrics.custom.initialization.retry-enabled=true
metrics.custom.initialization.max-retries=3
metrics.custom.initialization.retry-delay-ms=1000
metrics.custom.initialization.fail-on-error=false
metrics.custom.initialization.validation-enabled=true
metrics.custom.initialization.verbose-logging=false

# Legacy Configuration Support (for backward compatibility)
metrics.database.enabled=${metrics.custom.database.enabled}
metrics.http.enabled=${metrics.custom.http.enabled}
metrics.initialization.timeout=${metrics.custom.initialization.timeout}

# HikariCP Configuration for Metrics - EMERGENCY SETTINGS
spring.datasource.hikari.register-mbeans=true
spring.datasource.hikari.allow-pool-suspension=false
spring.datasource.hikari.maximum-pool-size=100
spring.datasource.hikari.minimum-idle=20
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.idle-timeout=180000
spring.datasource.hikari.max-lifetime=900000
spring.datasource.hikari.leak-detection-threshold=15000
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.initialization-fail-timeout=1
# Debug Metrics Endpoint Configuration
# Enable this endpoint for debugging HTTP request metrics
# WARNING: This endpoint should NOT be scraped by monitoring systems
metrics.debug.enabled=true

# Additional HikariCP optimizations for high-load scenarios
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.pool-name=GlobecoOrderServicePool

# JPA/Hibernate optimizations to reduce connection holding time
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=false
spring.jpa.properties.hibernate.connection.autocommit=true
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Transaction timeout to prevent long-running transactions
spring.transaction.default-timeout=30