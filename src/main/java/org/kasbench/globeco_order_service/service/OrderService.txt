package org.kasbench.globeco_order_service.service;

import org.kasbench.globeco_order_service.entity.Status;
import org.kasbench.globeco_order_service.entity.Order;
import org.kasbench.globeco_order_service.dto.TradeOrderPostDTO;
import org.kasbench.globeco_order_service.repository.OrderRepository;
import org.kasbench.globeco_order_service.repository.StatusRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class OrderService {
    private final OrderRepository orderRepository;
    private final StatusRepository statusRepository;
    private final org.springframework.web.client.RestTemplate restTemplate;

    public OrderService(OrderRepository orderRepository, StatusRepository statusRepository, org.springframework.web.client.RestTemplate restTemplate) {
        this.orderRepository = orderRepository;
        this.statusRepository = statusRepository;
        this.restTemplate = restTemplate;
    }

    @Transactional
    public boolean submitOrder(Integer id) {
        Order order = orderRepository.findById(id).orElseThrow();
        if (!order.getStatus().getAbbreviation().equals("NEW")) {
            return false;
        }
        TradeOrderPostDTO tradeOrder = TradeOrderPostDTO.builder()
                .orderId(order.getId())
                .portfolioId(order.getPortfolioId())
                .orderType(order.getOrderType().getAbbreviation())
                .securityId(order.getSecurityId())
                .quantity(order.getQuantity())
                .limitPrice(order.getLimitPrice())
                .tradeTimestamp(order.getOrderTimestamp())
                .blotterId(order.getBlotter() != null ? order.getBlotter().getId() : null)
                .build();
        String url = "http://localhost:8082/api/v1/tradeOrders";
        HttpEntity<TradeOrderPostDTO> request = new HttpEntity<>(tradeOrder);
        ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);
        if (response.getStatusCode() == HttpStatus.CREATED || response.getStatusCode() == HttpStatus.OK) {
            // Parse trade order id from response body
            Integer tradeOrderId = null;
            try {
                ObjectMapper mapper = new ObjectMapper();
                JsonNode node = mapper.readTree(response.getBody());
                if (node.has("id") && node.get("id").isInt()) {
                    tradeOrderId = node.get("id").asInt();
                }
                System.out.println("DEBUG: parsed tradeOrderId: " + tradeOrderId);
            } catch (Exception e) {
                // If parsing fails, treat as error
                return false;
            }
            if (tradeOrderId == null) {
                return false;
            }
            // Update status to SENT
            Status sentStatus = statusRepository.findAll().stream()
                .filter(s -> s.getAbbreviation().equals("SENT"))
                .findFirst().orElseThrow();
            // Create a new Order instance with updated tradeOrderId and status
            Order updatedOrder = Order.builder()
                .id(order.getId())
                .blotter(order.getBlotter())
                .status(sentStatus)
                .portfolioId(order.getPortfolioId())
                .orderType(order.getOrderType())
                .securityId(order.getSecurityId())
                .quantity(order.getQuantity())
                .limitPrice(order.getLimitPrice())
                .tradeOrderId(tradeOrderId)
                .orderTimestamp(order.getOrderTimestamp())
                .version(order.getVersion())
                .build();
            if (updatedOrder.getTradeOrderId() == null) throw new RuntimeException("tradeOrderId is null!");
            System.out.println("DEBUG: about to save order: " + updatedOrder);
            orderRepository.save(updatedOrder);
            return true;
        }
        // If not successful, do not update tradeOrderId
        return false;
    }

    // ... other methods ...
} 