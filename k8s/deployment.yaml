apiVersion: apps/v1
kind: Deployment
metadata:
  name: globeco-order-service
  labels:
    app: globeco-order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: globeco-order-service
  template:
    metadata:
      labels:
        app: globeco-order-service
    spec:
      nodeName: "node-5"
      containers:
        - name: globeco-order-service
          image: kasbench/globeco-order-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
          env:
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://globeco-order-service-postgresql:5432/postgres"
            - name: SPRING_DATASOURCE_USERNAME
              value: "postgres"
            - name: SPRING_DATASOURCE_PASSWORD
              value: "postgres"
            - name: METRICS_CUSTOM_ENABLED
              value: "true"
            - name: METRICS_CUSTOM_HTTP_ENABLED
              value: "true"
            - name: METRICS_CUSTOM_HTTP_REQUEST_ENABLED
              value: "true"
            - name: METRICS_CUSTOM_DATABASE_ENABLED
              value: "true"
            - name: SECURITY_SERVICE_URL
              value: "http://globeco-security-service:8000"
            - name: PORTFOLIO_SERVICE_URL
              value: "http://globeco-portfolio-service:8000"
            - name: EXTERNAL_SERVICES_SECURITY_URL
              value: "http://globeco-security-service:8000"
            - name: EXTERNAL_SERVICES_PORTFOLIO_URL
              value: "http://globeco-portfolio-service:8000"
            - name: LOG_LEVEL
              value: "INFO"
            - name: LOGGING_LEVEL_ROOT
              value: "INFO"
            - name: LOGGING_LEVEL_ORG_KASBENCH_GLOBECO_ORDER_SERVICE
              value: "INFO"
            - name: LOGGING_LEVEL_ORG_KASBENCH_GLOBECO_ORDER_SERVICE_SERVICE
              value: "INFO"
            - name: LOGGING_LEVEL_ORG_KASBENCH_GLOBECO_ORDER_SERVICE_CONTROLLER
              value: "INFO"
            
            # Inject the node and pod metadata from the Downward API
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace  

            # Inject the node IP from the Downward API
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP

            # Point OTEL exporter to the local collector on the same node
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://$(NODE_IP):4318"
            # Override OTLP metrics export URL to use host networking
            - name: MANAGEMENT_OTLP_METRICS_EXPORT_URL
              value: "http://$(NODE_IP):4318/v1/metrics"
            # Override OTLP tracing endpoint to use host networking
            - name: MANAGEMENT_OTLP_TRACING_ENDPOINT
              value: "http://$(NODE_IP):4318/v1/traces"

            # Define standard service identity attributes
            - name: OTEL_SERVICE_NAME
              value: "globeco-order-service"  # Changed to match container name
            - name: OTEL_SERVICE_NAMESPACE
              value: "globeco"
            
            # Inject Kubernetes metadata as resource attributes for k8sattributes processor
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: >-
                service.name=globeco-order-service,
                service.namespace=globeco,
                k8s.pod.ip=$(MY_POD_IP),
                k8s.pod.name=$(MY_POD_NAME),
                k8s.node.name=$(MY_NODE_NAME),
                k8s.namespace.name=$(MY_NAMESPACE)

          resources:
            requests:
              cpu: "1000m"
              memory: "2000Mi"
            limits:
              cpu: "1000m"
              memory: "2000Mi"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 240
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          # startupProbe:
          #   httpGet:
          #     path: /actuator/health/readiness
          #     port: 8081
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          #   timeoutSeconds: 5
          #   failureThreshold: 30
      restartPolicy: Always 
